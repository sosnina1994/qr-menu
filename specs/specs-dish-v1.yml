openapi: 3.0.3
info:
  title: "QR_MENU version 1.0.0"
  description: Digital menu
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
tags:
  - name: dish
    description: Блюдо меню
paths:
  /dish/create:
    post:
      tags:
        - dish
      summary: Create dish
      operationId: dishCreate
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishCreateRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishCreateResponse'

  /dish/read:
    post:
      tags:
        - dish
      summary: Read dish
      operationId: dishRead
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DishReadRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DishReadResponse'

components:
  schemas:
    #read
    DishReadRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishReadObject'

    DishReadObject:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/DishId'

    DishReadResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'

    #create
    DishCreateRequest:
      allOf:
        - $ref: '#/components/schemas/IRequest'
        - $ref: '#/components/schemas/DishRequestDebug'
        - type: object
          properties:
            dish:
              $ref: '#/components/schemas/DishCreateObject'
    DishCreateResponse:
      allOf:
        - $ref: '#/components/schemas/IResponse'
        - $ref: '#/components/schemas/DishResponseSingle'


    DishResponseSingle:
      allOf:
        - type: object
          description: Ответ с одним объектом
          properties:
            dish:
              $ref: '#/components/schemas/DishResponseObject'

    DishResponseObject:
      allOf:
        - $ref: '#/components/schemas/BaseDish'
        - type: object
          description: Объект, который возвращается в ответе бэкенда
          properties:
            id:
              $ref: '#/components/schemas/DishId'
            ownerId:
              $ref: '#/components/schemas/UserId'
            lock:
              $ref: '#/components/schemas/DishId'
            permissions:
              type: array
              uniqueItems: true
              items:
                $ref: '#/components/schemas/DishPermissions'

    DishId:
      type: string
      description: Идентификатор блюда

    UserId:
      type: string
      description: Идентификатор пользователя

    DishLock:
      type: string
      description: Версия оптимистичной блокировки

    DishPermissions:
      type: string
      description: Доступы для операций над позицией меню
      enum:
        - read
        - update
        - delete
        - makeVisiblePublic
        - makeVisibleOwn

    DishCreateObject:
      allOf:
        - $ref: '#/components/schemas/BaseDish'

    BaseDish:
      type: object
      description: Объект описывает свойства, одинаковые для create и update
      properties:
        name:
          type: string
          description: Наименование блюда
        description:
          type: string
          description: Описание блюда
        cost:
          type: number
          format: double
          description: Стоимость
        dishType:
          $ref: '#/components/schemas/EDishType'
        visibility:
          $ref: '#/components/schemas/EDishVisibility'

    EDishVisibility:
      type: string
      description: 'Тип видимости. Возможные значения: видит только ресторан, видимо всем'
      enum:
        - ownerOnly
        - public

    EDishType:
      type: string
      description: Тип блюда
      enum:
        - appetizer
        - main
        - desert

    DishRequestDebug:
      type: object
      properties:
        debug:
          $ref: '#/components/schemas/DishDebug'

    DishDebug:
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/EDishRequestDebugMode'
        stub:
          $ref: '#/components/schemas/EDishRequestDebugStubs'

    EDishRequestDebugMode:
      type: string
      enum:
        - prod
        - test
        - stub

    EDishRequestDebugStubs:
      type: string
      description: Перечисления всех стабов
      enum:
        - success
        - notFound
        - badId
        - badName
        - badDescription
        - badVisibility
        - cannotDelete
        - badSearchString


    IRequest:
      type: object
      description: Базовый интерфейс для всех запросов
      properties:
        requestType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
      discriminator:
        propertyName: requestType
        mapping:
          create: '#/components/schemas/DishCreateRequest'
          read: '#/components/schemas/DishReadRequest'
          #update: '#/components/schemas/DishUpdateRequest'
          #delete: '#/components/schemas/DishDeleteRequest'
          #search: '#/components/schemas/DishSearchRequest'

    IResponse:
      type: object
      description: Базовый интерфейс для всех ответов
      properties:
        responseType:
          type: string
          description: Поле-дескриминатор для вычисления типа запроса
          example: create
        requestId:
          type: string
          description: Идентификатор запроса для отладки
        result:
          $ref: '#/components/schemas/EResponseResult'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'

      discriminator:
        propertyName: responseType
        mapping:
          create: '#/components/schemas/DishCreateResponse'
          read: '#/components/schemas/DishReadResponse'
          #update: '#/components/schemas/DishUpdateResponse'
          #delete: '#/components/schemas/DishDeleteResponse'
          #search: '#/components/schemas/DishSearchResponse'

    EResponseResult:
      type: string
      enum:
        - success
        - error

    Error:
      type: object
      properties:
        code:
          type: string
        group:
          type: string
        field:
          type: string
        message:
          type: string
